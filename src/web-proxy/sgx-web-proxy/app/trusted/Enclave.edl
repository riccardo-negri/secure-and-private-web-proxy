/* Benchmark_Enclave.edl - Top EDL file. */
enclave {
	include "wolfssl/ssl.h"
	include "wolfssl/wolfcrypt/settings.h"
	include "wolfssl/wolfcrypt/types.h"

    include "wolfcrypt/test/test.h"
    include "wolfcrypt/benchmark/benchmark.h"

  from "ra_tls.edl" import *;

    trusted {
      public int enc_wolfSSL_Init(void);
      public WOLFSSL_METHOD* enc_wolfTLSv1_2_server_method(void);
		  public WOLFSSL_CTX* enc_wolfSSL_CTX_new([user_check] WOLFSSL_METHOD* method);
		  public void enc_serve_HTTP_Request(int connd, [user_check]WOLFSSL_CTX* ctx);
    	public void enc_create_key_and_x509([user_check]WOLFSSL_CTX* ctx);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print_string([in, string] const char* str);
        void ocall_low_res_time([out] int* time);
        size_t ocall_recv(int sockfd, [out, size=len] void *buf, size_t len, int flags) propagate_errno;
        size_t ocall_send(int sockfd, [in, size=len] const void *buf, size_t len, int flags) propagate_errno;
		    void ocall_getipfromdomain([in, string]const char* name, [out, size=len]char* ip_address, int len);
		    int ocall_open_socket_and_connect([in, string]const char* ip, int port, [out]int* sockfd);
    };
};
